// Copyright 2019-2021 Crytek GmbH / Crytek Group. All rights reserved.
// Autogenerated using GFxShaderMaker modified by Crytek (depot\SDK\3rdParty\Scaleform-4.6.34\Apps\Tools\GFxShaderMaker)

#include "StdAfx.h"

#include "Renderer/SFShaderDescs.h"
#include "Renderer/SFTechnique.h"
#include "Render/Render_Vertex.h"

namespace Scaleform {
namespace Render {

const unsigned char Uniform::UniformFlags[Uniform::SU_Count] = { 0 };

static std::unordered_map<int32, TechniqueDesc> s_techniqueDescs;

enum EShaderFeatures : uint64
{
	SF_INSTANCED                 = 0x1,
	SF_BATCH                     = 0x2,
	SF_POSITION2D                = 0x4,
	SF_POSITION3D                = 0x8,
	SF_TEXTG                     = 0x10,
	SF_ATEXTG                    = 0x20,
	SF_VERTEX                    = 0x40,
	SF_TEXTGTEXTG                = 0x80,
	SF_ATEXTGATEXTG              = 0x100,
	SF_TEXTGVERTEX               = 0x200,
	SF_ATEXTGVERTEX              = 0x400,
	SF_CXFORM                    = 0x800,
	SF_CXFORMAC                  = 0x1000,
	SF_EALPHA                    = 0x2000,
	SF_MUL                       = 0x4000,
	SF_INV                       = 0x8000,
	SF_INVERSEGAMMA              = 0x10000,
	SF_TEXDENSITY                = 0x20000,
	SF_TEXTGVERTEXONLY           = 0x40000,
	SF_FACTORS                   = 0x80000,
	SF_SOLID                     = 0x100000,
	SF_TEXT                      = 0x200000,
	SF_TEXUV                     = 0x400000,
	SF_ATEXUV                    = 0x800000,
	SF_DEPTHMASKCLEAR            = 0x1000000,
	SF_YUV                       = 0x2000000,
	SF_YUVA                      = 0x4000000,
	SF_YUY2                      = 0x8000000,
	SF_CMATRIXAC                 = 0x10000000,
	SF_BOX1                      = 0x20000000,
	SF_BOX2                      = 0x40000000,
	SF_BLUR                      = 0x80000000,
	SF_SHADOWBASE                = 0x100000000,
	SF_BEVELBASE                 = 0x200000000,
	SF_SCOLOR                    = 0x400000000,
	SF_SCOLOR2                   = 0x800000000,
	SF_SGRAD                     = 0x1000000000,
	SF_SGRAD2                    = 0x2000000000,
	SF_BASE                      = 0x4000000000,
	SF_HIDEBASE                  = 0x8000000000,
	SF_OUTERBEVEL                = 0x10000000000,
	SF_INNERBEVEL                = 0x20000000000,
	SF_INNERSHADOW               = 0x40000000000,
	SF_FULLBEVEL                 = 0x80000000000,
	SF_DISPLACEMENTMAP           = 0x100000000000,
	SF_DMIGNORE                  = 0x200000000000,
	SF_DMCOLOR                   = 0x400000000000,
	SF_DRAWABLECOPYPIXELS        = 0x800000000000,
	SF_DRAWABLECOPYPIXELSALPHA   = 0x1000000000000,
	SF_INALPHA                   = 0x2000000000000,
	SF_MERGEALPHA                = 0x4000000000000,
	SF_NODESTALPHA               = 0x8000000000000,
	SF_COPYLERP                  = 0x10000000000000,
	SF_TEXTGTEXTGVERTEXONLY      = 0x20000000000000,
	SF_TEXTGTEXTGTEXTGVERTEXONLY = 0x40000000000000,
	SF_DRAWABLEMERGE             = 0x80000000000000,
	SF_DRAWABLECOMPARE           = 0x100000000000000,
	SF_DRAWABLEPALETTEMAP        = 0x200000000000000,
	SF_BLENDLIGHTEN              = 0x400000000000000,
	SF_BLENDDARKEN               = 0x800000000000000,
	SF_BLENDOVERLAY              = 0x1000000000000000,
	SF_BLENDHARDLIGHT            = 0x2000000000000000,
	SF_BLENDDIFFERENCE           = 0x4000000000000000,
	SF_BLENDLAYER                = 0x8000000000000000,
};

inline EShaderFeatures  operator|(const EShaderFeatures f0, const EShaderFeatures f1) { return EShaderFeatures((uint64)f0 | (uint64)f1); }
inline EShaderFeatures& operator|=(EShaderFeatures& f0, const EShaderFeatures f1)     { return f0 = EShaderFeatures((uint64)f0 | (uint64)f1); }

static TechniqueDesc::VertexAttrDesc inputVars[] =
{
	{ "acolor",  4 | VET_Color,                          "COLOR",    0, DXGI_FORMAT_R8G8B8A8_UNORM, SF_VERTEX | SF_TEXTGVERTEX | SF_ATEXTGVERTEX | SF_TEXT                                                                                                                                                          },
	{ "afactor", 4 | VET_Color | (1 << VET_Index_Shift), "COLOR",    1, DXGI_FORMAT_R8G8B8A8_UNORM, SF_FACTORS                                                                                                                                                                                                      },
	{ "atc",     2 | VET_TexCoord,                       "TEXCOORD", 0, DXGI_FORMAT_R32G32_FLOAT,   SF_TEXT | SF_TEXUV | SF_ATEXUV                                                                                                                                                                                  },
	{ "pos",     4 | VET_Pos,                            "POSITION", 0, DXGI_FORMAT_R32G32_FLOAT,   SF_POSITION2D | SF_POSITION3D | SF_TEXTG | SF_TEXTGTEXTG | SF_ATEXTGATEXTG | SF_TEXTGVERTEX | SF_ATEXTGVERTEX | SF_TEXTGVERTEXONLY | SF_DEPTHMASKCLEAR | SF_TEXTGTEXTGVERTEXONLY | SF_TEXTGTEXTGTEXTGVERTEXONLY },
	{ "vbatch",  1 | VET_Instance8,                      "COLOR",    2, DXGI_FORMAT_R8G8B8A8_UINT,  SF_INSTANCED | SF_BATCH                                                                                                                                                                                         }, };

static CCryNameTSCRC techniques[] =
{
	CCryNameTSCRC("base"),
	CCryNameTSCRC("base_text"),
	CCryNameTSCRC("mask_clear"),
	CCryNameTSCRC("base_video"),
	CCryNameTSCRC("cmatrix"),
	CCryNameTSCRC("blurs"),
	CCryNameTSCRC("shadows"),
	CCryNameTSCRC("DisplacementMap"),
	CCryNameTSCRC("DrawableCopyPixels"),
	CCryNameTSCRC("DrawableMerge"),
	CCryNameTSCRC("DrawableCompare"),
	CCryNameTSCRC("DrawablePaletteMap"),
	CCryNameTSCRC("blends"), };

struct UniformDesc
{
	enum SlotType : int16
	{
		Pixel   = 0x1,
		Vertex  = 0x2,
		Sampler = 0x4
	};

	Uniform::UniformType Name;
	SlotType             Slot;
	int16                RegisterCount;
	int16                ElementSize;
	int16                AllElementsSize;
	EShaderFeatures      ShaderFeatures;
};

inline UniformDesc::SlotType operator|(const UniformDesc::SlotType s0, const UniformDesc::SlotType s1) { return UniformDesc::SlotType((int16)s0 | (int16)s1); }

static UniformDesc uniformsDescs[] =
{
	{ Uniform::SU_alphatex,    UniformDesc::Pixel | UniformDesc::Sampler, 1, 1,  1,  SF_BLENDLAYER                                                                                                                                                      },
	{ Uniform::SU_boundColor,  UniformDesc::Pixel,                        1, 4,  4,  SF_DMCOLOR                                                                                                                                                         },
	{ Uniform::SU_cmatadd,     UniformDesc::Pixel,                        1, 4,  4,  SF_CMATRIXAC                                                                                                                                                       },
	{ Uniform::SU_cmatmul,     UniformDesc::Pixel,                        4, 16, 16, SF_CMATRIXAC                                                                                                                                                       },
	{ Uniform::SU_compx,       UniformDesc::Pixel,                        1, 4,  4,  SF_DISPLACEMENTMAP                                                                                                                                                 },
	{ Uniform::SU_compy,       UniformDesc::Pixel,                        1, 4,  4,  SF_DISPLACEMENTMAP                                                                                                                                                 },
	{ Uniform::SU_cxadd,       UniformDesc::Pixel,                        1, 4,  4,  SF_BLENDLIGHTEN | SF_BLENDDARKEN | SF_BLENDOVERLAY | SF_BLENDHARDLIGHT | SF_BLENDDIFFERENCE                                                                        },
	{ Uniform::SU_cxmul,       UniformDesc::Pixel,                        4, 16, 16, SF_DRAWABLEMERGE                                                                                                                                                   },
	{ Uniform::SU_cxmul,       UniformDesc::Pixel,                        1, 4,  4,  SF_SOLID | SF_DEPTHMASKCLEAR | SF_BLENDLIGHTEN | SF_BLENDDARKEN | SF_BLENDOVERLAY | SF_BLENDHARDLIGHT | SF_BLENDDIFFERENCE                                         },
	{ Uniform::SU_cxmul1,      UniformDesc::Pixel,                        4, 16, 16, SF_DRAWABLEMERGE                                                                                                                                                   },
	{ Uniform::SU_dsttex,      UniformDesc::Pixel | UniformDesc::Sampler, 1, 1,  1,  SF_BLENDLIGHTEN | SF_BLENDDARKEN | SF_BLENDOVERLAY | SF_BLENDHARDLIGHT | SF_BLENDDIFFERENCE                                                                        },
	{ Uniform::SU_fsize,       UniformDesc::Pixel,                        1, 4,  4,  SF_BOX1 | SF_BOX2 | SF_BLUR | SF_SHADOWBASE | SF_BEVELBASE | SF_SGRAD | SF_SGRAD2 | SF_OUTERBEVEL | SF_INNERBEVEL | SF_INNERSHADOW | SF_FULLBEVEL                  },
	{ Uniform::SU_gradtex,     UniformDesc::Pixel | UniformDesc::Sampler, 1, 1,  1,  SF_SGRAD | SF_SGRAD2                                                                                                                                               },
	{ Uniform::SU_mapScale,    UniformDesc::Pixel,                        1, 4,  4,  SF_DISPLACEMENTMAP                                                                                                                                                 },
	{ Uniform::SU_maptex,      UniformDesc::Pixel | UniformDesc::Sampler, 1, 1,  1,  SF_DISPLACEMENTMAP                                                                                                                                                 },
	{ Uniform::SU_mipLevels,   UniformDesc::Pixel,                        1, 1,  1,  SF_TEXDENSITY                                                                                                                                                      },
	{ Uniform::SU_offset,      UniformDesc::Pixel,                        1, 4,  4,  SF_SHADOWBASE | SF_BEVELBASE                                                                                                                                       },
	{ Uniform::SU_scale,       UniformDesc::Pixel,                        1, 4,  4,  SF_DISPLACEMENTMAP                                                                                                                                                 },
	{ Uniform::SU_scolor,      UniformDesc::Pixel,                        1, 4,  4,  SF_SCOLOR | SF_SCOLOR2                                                                                                                                             },
	{ Uniform::SU_scolor2,     UniformDesc::Pixel,                        1, 4,  4,  SF_SCOLOR2                                                                                                                                                         },
	{ Uniform::SU_srctex,      UniformDesc::Pixel | UniformDesc::Sampler, 1, 1,  1,  SF_BASE | SF_HIDEBASE | SF_DRAWABLEPALETTEMAP | SF_BLENDLIGHTEN | SF_BLENDDARKEN | SF_BLENDOVERLAY | SF_BLENDHARDLIGHT | SF_BLENDDIFFERENCE | SF_BLENDLAYER        },
	{ Uniform::SU_srctexscale, UniformDesc::Pixel,                        1, 4,  4,  SF_BASE | SF_HIDEBASE                                                                                                                                              },
	{ Uniform::SU_tex,         UniformDesc::Pixel | UniformDesc::Sampler, 3, 1,  3,  SF_YUV | SF_DRAWABLECOPYPIXELSALPHA                                                                                                                                },
	{ Uniform::SU_tex,         UniformDesc::Pixel | UniformDesc::Sampler, 4, 1,  4,  SF_ATEXTGATEXTG | SF_YUVA                                                                                                                                          },
	{ Uniform::SU_tex,         UniformDesc::Pixel | UniformDesc::Sampler, 2, 1,  2,  SF_ATEXTG | SF_TEXTGTEXTG | SF_ATEXTGVERTEX | SF_ATEXUV | SF_DRAWABLECOPYPIXELS | SF_DRAWABLEMERGE | SF_DRAWABLECOMPARE                                            },
	{ Uniform::SU_tex,         UniformDesc::Pixel | UniformDesc::Sampler, 1, 1,  1,  SF_TEXTG | SF_TEXTGVERTEX | SF_TEXT | SF_TEXUV | SF_YUY2 | SF_BOX1 | SF_BOX2 | SF_BLUR | SF_SHADOWBASE | SF_BEVELBASE | SF_DISPLACEMENTMAP | SF_DRAWABLEPALETTEMAP },
	{ Uniform::SU_texscale,    UniformDesc::Pixel,                        1, 4,  4,  SF_BOX1 | SF_BOX2 | SF_BLUR | SF_SHADOWBASE | SF_BEVELBASE                                                                                                         },
	{ Uniform::SU_textureDims, UniformDesc::Pixel,                        1, 2,  2,  SF_TEXDENSITY                                                                                                                                                      },
	{ Uniform::SU_cxadd,       UniformDesc::Vertex,                       1, 4,  4,  SF_CXFORM | SF_CXFORMAC | SF_TEXT                                                                                                                                  },
	{ Uniform::SU_cxmul,       UniformDesc::Vertex,                       1, 4,  4,  SF_CXFORM | SF_CXFORMAC | SF_TEXT                                                                                                                                  },
	{ Uniform::SU_mvp,         UniformDesc::Vertex,                       2, 4,  8,  SF_POSITION2D | SF_DEPTHMASKCLEAR                                                                                                                                  },
	{ Uniform::SU_mvp,         UniformDesc::Vertex,                       4, 4,  16, SF_POSITION3D                                                                                                                                                      },
	{ Uniform::SU_texgen,      UniformDesc::Vertex,                       2, 4,  8,  SF_TEXTG | SF_TEXTGVERTEX | SF_ATEXTGVERTEX | SF_TEXTGVERTEXONLY                                                                                                   },
	{ Uniform::SU_texgen,      UniformDesc::Vertex,                       4, 4,  16, SF_TEXTGTEXTG | SF_ATEXTGATEXTG | SF_TEXTGTEXTGVERTEXONLY                                                                                                          },
	{ Uniform::SU_texgen,      UniformDesc::Vertex,                       6, 4,  24, SF_TEXTGTEXTGTEXTGVERTEXONLY                                                                                                                                       },
	{ Uniform::SU_vfuniforms,  UniformDesc::Vertex,                       0, 4,  0,  SF_INSTANCED | SF_BATCH                                                                                                                                            }, };

void ShaderDesc::GetTechniqueAndShaderFeatures(ShaderType type, CCryNameTSCRC& technique, EShaderFeatures& features)
{
	features = EShaderFeatures(0);
	technique = techniques[type / ST_start_base_text];

	CRY_ASSERT((type / ST_start_base_text) < (sizeof(techniques) / sizeof(CCryNameTSCRC)));
	if (ST_start_base <= type && type <= ST_end_base)
	{
		type = ShaderType(type - 1);    // Only "base" type adds 1 in ShaderType definition in order to keep ST_None = 0, so we have to subtruct it now.
		if (ST_base_Batch & type)
			features |= SF_BATCH;
		if (ST_base_Instanced & type)
			features |= SF_INSTANCED;
		if (0 == ((ST_base_Position3d) & type))
			features |= SF_POSITION2D;
		if (ST_base_Position3d & type)
			features |= SF_POSITION3D;
		if (0 == ((ST_base_ATexTG | ST_base_Vertex | ST_base_TexTGTexTG | ST_base_ATexTGATexTG | ST_base_TexTGVertex | ST_base_ATexTGVertex) & type))
			features |= SF_TEXTG;
		if (ST_base_ATexTG & type)
			features |= SF_ATEXTG | SF_TEXTGVERTEXONLY;
		if (ST_base_Vertex & type)
			features |= SF_VERTEX;
		if (ST_base_TexTGTexTG & type)
			features |= SF_TEXTGTEXTG | SF_FACTORS;
		if (ST_base_ATexTGATexTG & type)
			features |= SF_ATEXTGATEXTG | SF_FACTORS;
		if (ST_base_TexTGVertex & type)
			features |= SF_TEXTGVERTEX | SF_FACTORS;
		if (ST_base_ATexTGVertex & type)
			features |= SF_ATEXTGVERTEX | SF_FACTORS;
		if (ST_base_Cxform & type)
			features |= SF_CXFORM;
		if (ST_base_CxformAc & type)
			features |= SF_CXFORMAC;
		if (ST_base_EAlpha & type)
			features |= SF_EALPHA | SF_FACTORS;
		if (ST_base_Mul & type)
			features |= SF_MUL;
		if (ST_base_Inv & type)
			features |= SF_INV;
		features |= SF_INVERSEGAMMA;
		if (ST_base_TexDensity & type)
			features |= SF_TEXDENSITY;
	}
	else if (ST_start_base_text <= type && type <= ST_end_base_text)
	{
		if (ST_base_text_Batch & type)
			features |= SF_BATCH;
		if (ST_base_text_Instanced & type)
			features |= SF_INSTANCED;
		if (0 == ((ST_base_text_Position3d) & type))
			features |= SF_POSITION2D;
		if (ST_base_text_Position3d & type)
			features |= SF_POSITION3D;
		if (0 == ((ST_base_text_Text | ST_base_text_TexUV | ST_base_text_ATexUV) & type))
			features |= SF_SOLID;
		if (ST_base_text_Text & type)
			features |= SF_TEXT;
		if (ST_base_text_TexUV & type)
			features |= SF_TEXUV;
		if (ST_base_text_ATexUV & type)
			features |= SF_ATEXUV;
		if (ST_base_text_Cxform & type)
			features |= SF_CXFORM;
		if (ST_base_text_Mul & type)
			features |= SF_MUL;
		if (ST_base_text_Inv & type)
			features |= SF_INV;
		features |= SF_INVERSEGAMMA;
		if (ST_base_text_TexDensity & type)
			features |= SF_TEXDENSITY;
	}
	else if (ST_start_mask_clear <= type && type <= ST_end_mask_clear)
	{
		features |= SF_DEPTHMASKCLEAR;
	}
	else if (ST_start_base_video <= type && type <= ST_end_base_video)
	{
		if (ST_base_video_Batch & type)
			features |= SF_BATCH;
		if (ST_base_video_Instanced & type)
			features |= SF_INSTANCED;
		if (0 == ((ST_base_video_Position3d) & type))
			features |= SF_POSITION2D;
		if (ST_base_video_Position3d & type)
			features |= SF_POSITION3D;
		features |= SF_TEXTGVERTEXONLY;
		if (0 == ((ST_base_video_YUVA | ST_base_video_YUY2) & type))
			features |= SF_YUV;
		if (ST_base_video_YUVA & type)
			features |= SF_YUVA;
		if (ST_base_video_YUY2 & type)
			features |= SF_YUY2;
		if (ST_base_video_Cxform & type)
			features |= SF_CXFORM;
		if (ST_base_video_CxformAc & type)
			features |= SF_CXFORMAC;
		if (ST_base_video_EAlpha & type)
			features |= SF_EALPHA | SF_FACTORS;
		if (ST_base_video_Mul & type)
			features |= SF_MUL;
		if (ST_base_video_Inv & type)
			features |= SF_INV;
		features |= SF_INVERSEGAMMA;
		if (ST_base_video_TexDensity & type)
			features |= SF_TEXDENSITY;
	}
	else if (ST_start_cmatrix <= type && type <= ST_end_cmatrix)
	{
		features |= SF_POSITION2D;
		features |= SF_BATCH;
		features |= SF_TEXTG;
		features |= SF_CMATRIXAC;
		features |= SF_CXFORMAC;
		if (ST_cmatrix_EAlpha & type)
			features |= SF_EALPHA | SF_FACTORS;
		if (ST_cmatrix_Mul & type)
			features |= SF_MUL;
		features |= SF_INVERSEGAMMA;
	}
	else if (ST_start_blurs <= type && type <= ST_end_blurs)
	{
		features |= SF_POSITION2D;
		features |= SF_BATCH;
		features |= SF_TEXTGVERTEXONLY;
		if (0 == ((ST_blurs_Box2) & type))
			features |= SF_BOX1;
		if (ST_blurs_Box2 & type)
			features |= SF_BOX2;
		features |= SF_BLUR;
		features |= SF_CXFORMAC;
		if (ST_blurs_Mul & type)
			features |= SF_MUL;
		features |= SF_INVERSEGAMMA;
	}
	else if (ST_start_shadows <= type && type <= ST_end_shadows)
	{
		features |= SF_POSITION2D;
		features |= SF_BATCH;
		features |= SF_TEXTGVERTEXONLY;
		features |= SF_BOX2;
		if (0 == ((ST_shadows_BevelBase) & type))
			features |= SF_SHADOWBASE;
		if (ST_shadows_BevelBase & type)
			features |= SF_BEVELBASE;
		if (0 == ((ST_shadows_SColor2 | ST_shadows_SGrad | ST_shadows_SGrad2) & type))
			features |= SF_SCOLOR;
		if (ST_shadows_SColor2 & type)
			features |= SF_SCOLOR2;
		if (ST_shadows_SGrad & type)
			features |= SF_SGRAD;
		if (ST_shadows_SGrad2 & type)
			features |= SF_SGRAD2;
		if (0 == ((ST_shadows_HideBase) & type))
			features |= SF_BASE;
		if (ST_shadows_HideBase & type)
			features |= SF_HIDEBASE;
		if (0 == ((ST_shadows_InnerBevel | ST_shadows_InnerShadow | ST_shadows_FullBevel) & type))
			features |= SF_OUTERBEVEL;
		if (ST_shadows_InnerBevel & type)
			features |= SF_INNERBEVEL;
		if (ST_shadows_InnerShadow & type)
			features |= SF_INNERSHADOW;
		if (ST_shadows_FullBevel & type)
			features |= SF_FULLBEVEL;
		features |= SF_CXFORMAC;
		if (ST_shadows_Mul & type)
			features |= SF_MUL;
		features |= SF_INVERSEGAMMA;
	}
	else if (ST_start_DisplacementMap <= type && type <= ST_end_DisplacementMap)
	{
		features |= SF_POSITION2D;
		features |= SF_BATCH;
		features |= SF_TEXTGVERTEXONLY;
		features |= SF_DISPLACEMENTMAP;
		if (ST_DisplacementMap_DMIgnore & type)
			features |= SF_DMIGNORE;
		if (ST_DisplacementMap_DMColor & type)
			features |= SF_DMCOLOR;
		features |= SF_INVERSEGAMMA;
	}
	else if (ST_start_DrawableCopyPixels <= type && type <= ST_end_DrawableCopyPixels)
	{
		features |= SF_POSITION2D;
		features |= SF_BATCH;
		if (0 == ((ST_DrawableCopyPixels_DrawableCopyPixelsAlpha) & type))
			features |= SF_DRAWABLECOPYPIXELS | SF_TEXTGTEXTGVERTEXONLY;
		if (ST_DrawableCopyPixels_DrawableCopyPixelsAlpha & type)
			features |= SF_DRAWABLECOPYPIXELSALPHA | SF_TEXTGTEXTGTEXTGVERTEXONLY;
		if (0 == ((ST_DrawableCopyPixels_MergeAlpha | ST_DrawableCopyPixels_NoDestAlpha) & type))
			features |= SF_INALPHA;
		if (ST_DrawableCopyPixels_MergeAlpha & type)
			features |= SF_MERGEALPHA;
		if (ST_DrawableCopyPixels_NoDestAlpha & type)
			features |= SF_NODESTALPHA;
		features |= SF_COPYLERP;
	}
	else if (ST_start_DrawableMerge <= type && type <= ST_end_DrawableMerge)
	{
		features |= SF_POSITION2D;
		features |= SF_BATCH;
		features |= SF_TEXTGTEXTGVERTEXONLY;
		features |= SF_DRAWABLEMERGE;
	}
	else if (ST_start_DrawableCompare <= type && type <= ST_end_DrawableCompare)
	{
		features |= SF_POSITION2D;
		features |= SF_BATCH;
		features |= SF_DRAWABLECOMPARE | SF_TEXTGTEXTGVERTEXONLY;
	}
	else if (ST_start_DrawablePaletteMap <= type && type <= ST_end_DrawablePaletteMap)
	{
		features |= SF_POSITION2D;
		features |= SF_BATCH;
		features |= SF_DRAWABLEPALETTEMAP | SF_TEXTGVERTEXONLY;
	}
	else if (ST_start_blends <= type && type <= ST_end_blends)
	{
		features |= SF_POSITION2D;
		features |= SF_BATCH;
		features |= SF_TEXTGTEXTGVERTEXONLY;
		if (0 == ((ST_blends_BlendDarken | ST_blends_BlendOverlay | ST_blends_BlendHardlight | ST_blends_BlendDifference | ST_blends_BlendLayer) & type))
			features |= SF_BLENDLIGHTEN;
		if (ST_blends_BlendDarken & type)
			features |= SF_BLENDDARKEN;
		if (ST_blends_BlendOverlay & type)
			features |= SF_BLENDOVERLAY;
		if (ST_blends_BlendHardlight & type)
			features |= SF_BLENDHARDLIGHT;
		if (ST_blends_BlendDifference & type)
			features |= SF_BLENDDIFFERENCE;
		if (ST_blends_BlendLayer & type)
			features |= SF_BLENDLAYER | SF_CXFORMAC;
	}
}

const TechniqueDesc& TechniqueDesc::GetDesc(ShaderDesc::ShaderType shader)
{
	auto it = s_techniqueDescs.find(shader);
	if (s_techniqueDescs.end() != it)
	{
		return it->second;
	}

	TechniqueDesc& desc = s_techniqueDescs[shader];
	ShaderDesc::GetTechniqueAndShaderFeatures(shader, desc.Technique, desc.ShaderFeatures);

	uint16 pixelOffset = 0;
	uint16 vertexOffset = 0;
	uint16 samplerOffset = 0;
	UniformVar invalidVar = { -1, 0, 0, 0 };
	BatchVar invalidBatchVar = { -1, 0 };

	for (Uniform::UniformType u = Uniform::UniformType(0); u < Uniform::SU_Count; u = Uniform::UniformType(u + 1))
	{
		desc.Uniforms[u] = invalidVar;
		desc.BatchUniforms[u] = invalidBatchVar;
	}

	for (uint32 d = 0; d < (sizeof(uniformsDescs) / sizeof(UniformDesc)); ++d)
	{
		UniformDesc& uniformDesc = uniformsDescs[d];
		Uniform::UniformType u = uniformDesc.Name;

		if (uniformDesc.ShaderFeatures & desc.ShaderFeatures)
		{
			UniformVar& uniformVar = desc.Uniforms[u];
			BatchVar& batchVar = desc.BatchUniforms[u];

			if (uniformDesc.Slot & UniformDesc::Pixel)
			{
				if (uniformDesc.Slot & UniformDesc::Sampler)
				{
					uniformVar.Location = samplerOffset;
					samplerOffset += uniformDesc.RegisterCount;
				}
				else
				{
					uniformVar.Location = pixelOffset;
					pixelOffset += uniformDesc.RegisterCount;
				}
			}
			else
			{
				CRY_ASSERT(0 == (uniformDesc.Slot & UniformDesc::Sampler), "Sampler in vertex shader is not supported.");
				uniformVar.Location = pixelOffset + vertexOffset;
				vertexOffset += uniformDesc.RegisterCount;
			}
			uniformVar.ShadowOffset = uniformVar.Location * 4;
			uniformVar.ElementSize = uniformDesc.ElementSize;
			uniformVar.Size = uniformDesc.AllElementsSize;

			if ((desc.ShaderFeatures & (SF_INSTANCED | SF_BATCH)) && (uniformDesc.Slot & UniformDesc::Vertex))
			{
				if (Uniform::SU_vfuniforms == u)
				{
					uniformVar.Location = pixelOffset;
					uniformVar.ShadowOffset = uniformVar.Location * 4;
					uniformVar.Size = vertexOffset * SF_RENDER_MAX_BATCHES * uniformVar.ElementSize;
					desc.BatchSize = vertexOffset;
				}
				else
				{
					CRY_ASSERT(uniformVar.Location <= 127);
					batchVar.Offset = (int8)(uniformVar.Location - pixelOffset);
					batchVar.Size = uniformVar.Size / uniformVar.ElementSize;
					uniformVar = invalidVar;
				}
			}
		}
	}

	desc.NumAttribs = 0;
	for (int32 v = 0; v < sizeof(inputVars) / sizeof(VertexAttrDesc); ++v)
	{
		const VertexAttrDesc& attrDesc = inputVars[v];
		if ((attrDesc.ShaderFeatures == EShaderFeatures(SF_INSTANCED | SF_BATCH)) &&
		    ((SF_BATCH | SF_FACTORS) == (desc.ShaderFeatures & (SF_BATCH | SF_FACTORS)) ||
		     (desc.ShaderFeatures & SF_INSTANCED)))
		{
			continue;
		}

		if (attrDesc.ShaderFeatures & desc.ShaderFeatures)
		{
			desc.Attributes[desc.NumAttribs] = attrDesc;
			++desc.NumAttribs;
		}
	}

	return desc;
}

} // ~Render namespace
} // ~Scaleform namespace
